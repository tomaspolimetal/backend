const sequelize = require('../config/db');
const Cliente = require('../models/cliente');
const Maquina = require('../models/Maquina');
const Recorte = require('../models/Recorte');

async function verifyDatabase() {
  try {
    console.log('üîç Verificando conexi√≥n a la base de datos...');
    
    // Verificar conexi√≥n
    await sequelize.authenticate();
    console.log('‚úÖ Conexi√≥n establecida correctamente.');
    
    // Obtener informaci√≥n de las tablas
    console.log('\nüìã Verificando tablas existentes...');
    const queryInterface = sequelize.getQueryInterface();
    const tables = await queryInterface.showAllTables();
    console.log('Tablas encontradas:', tables);
    
    // Verificar estructura de cada tabla
    for (const table of tables) {
      if (table !== 'SequelizeMeta') {
        console.log(`\nüîç Estructura de la tabla '${table}':`);
        try {
          const columns = await queryInterface.describeTable(table);
          console.log(JSON.stringify(columns, null, 2));
        } catch (error) {
          console.log(`‚ùå Error al obtener estructura de ${table}:`, error.message);
        }
      }
    }
    
    // Verificar conteo de registros
    console.log('\nüìä Conteo de registros:');
    
    try {
      const clientesCount = await Cliente.count();
      console.log(`- Clientes: ${clientesCount}`);
    } catch (error) {
      console.log('‚ùå Error al contar clientes:', error.message);
    }
    
    try {
      const maquinasCount = await Maquina.count();
      console.log(`- M√°quinas: ${maquinasCount}`);
    } catch (error) {
      console.log('‚ùå Error al contar m√°quinas:', error.message);
    }
    
    try {
      const recortesCount = await Recorte.count();
      console.log(`- Recortes: ${recortesCount}`);
    } catch (error) {
      console.log('‚ùå Error al contar recortes:', error.message);
    }
    
    // Probar inserci√≥n de datos de prueba
    console.log('\nüß™ Probando inserci√≥n de datos...');
    
    try {
      // Verificar si ya existen m√°quinas
      const existingMaquinas = await Maquina.findAll();
      if (existingMaquinas.length === 0) {
        const maquina = await Maquina.create({
          nombre: 'M√°quina de Prueba'
        });
        console.log('‚úÖ M√°quina de prueba creada:', maquina.id);
      } else {
        console.log('‚úÖ M√°quinas ya existen en la base de datos');
      }
    } catch (error) {
      console.log('‚ùå Error al crear m√°quina de prueba:', error.message);
    }
    
    try {
      // Crear cliente de prueba
      const cliente = await Cliente.create({
        cliente: 'Cliente de Prueba',
        espesor: 2.5,
        tipoMaterial: 'Acero',
        largo: 100.0,
        ancho: 50.0,
        cantidad: 1,
        remito: 12345,
        observaciones: 'Prueba de conexi√≥n',
        estado: true
      });
      console.log('‚úÖ Cliente de prueba creado:', cliente.id);
      
      // Eliminar el cliente de prueba
      await cliente.destroy();
      console.log('‚úÖ Cliente de prueba eliminado');
    } catch (error) {
      console.log('‚ùå Error al crear/eliminar cliente de prueba:', error.message);
    }
    
    console.log('\nüéâ Verificaci√≥n completada exitosamente!');
    
  } catch (error) {
    console.error('‚ùå Error durante la verificaci√≥n:', error);
    throw error;
  } finally {
    await sequelize.close();
  }
}

// Ejecutar si se llama directamente
if (require.main === module) {
  verifyDatabase()
    .then(() => {
      console.log('\n‚úÖ Proceso de verificaci√≥n completado.');
      process.exit(0);
    })
    .catch((error) => {
      console.error('\n‚ùå Error en el proceso de verificaci√≥n:', error);
      process.exit(1);
    });
}

module.exports = verifyDatabase;